module Boss

augment Cmd
  DEFINITIONS
    EXE_CONTINUE  = 0
    EXE_EXCEPTION = 1
    EXE_RETURN    = 2

  METHODS
    method execute->Int32
      throw t.error( "[INTERNAL] $.execute() is undefined."(type_name) )
endAugment

augment CmdList
  METHODS
    method execute->Int32
      forEach (cmd in list)
        local status = cmd.execute
        if (status) return status
      endForEach
      return EXE_CONTINUE
endAugment

augment AddInt32
  METHODS
    method execute->Int32
      local status = left.execute
      if (status) return status
      local a = Program.int32_stack.remove_last

      status = right.execute
      if (status) return status
      Program.int32_stack.last = (a + Program.int32_stack.last)
      return EXE_CONTINUE
endAugment

augment DescriptionInt32
  METHODS
    method execute->Int32
      local status = operand.execute
      if (status) return status
      Program.string_stack.add( Program.int32_stack.remove_last->String )
      return EXE_CONTINUE
endAugment

augment LiteralString
  METHODS
    method execute->Int32
      Program.string_stack.add( value )
      return EXE_CONTINUE
endAugment

augment LiteralLogical
  METHODS
    method execute->Int32
      Program.int32_stack.add( which{value:1||0} )
      return EXE_CONTINUE
endAugment

augment LiteralByte
  METHODS
    method execute->Int32
      Program.int32_stack.add( value )
      return EXE_CONTINUE
endAugment

augment LiteralCharacter
  METHODS
    method execute->Int32
      Program.int32_stack.add( value )
      return EXE_CONTINUE
endAugment

augment LiteralInt32
  METHODS
    method execute->Int32
      Program.int32_stack.add( value )
      return EXE_CONTINUE
endAugment

augment LiteralInt64
endAugment

augment LiteralReal32
  METHODS
    method execute->Int32
      Program.real64_stack.add( value )
      return EXE_CONTINUE
endAugment

augment LiteralReal64
  METHODS
    method execute->Int32
      Program.real64_stack.add( value )
      return EXE_CONTINUE
endAugment

augment LiteralPi
  METHODS
    method execute->Int32
      Program.real64_stack.add( pi )
      return EXE_CONTINUE
endAugment

augment Print
  METHODS
    method execute->Int32
      forEach (cmd in args.list)
        local status = cmd.execute
        if (status) return status
        print Program.string_stack.remove_last
      endForEach
      return EXE_CONTINUE
endAugment

augment Println
  METHODS
    method execute->Int32
      forEach (cmd in args.list)
        local status = cmd.execute
        if (status) return status
        print Program.string_stack.remove_last
      endForEach
      println
      return EXE_CONTINUE
endAugment

augment StackPopInt32
  METHODS
    method execute->Int32
      local status = operand.execute
      if (status) return status
      Program.int32_stack.remove_last
      return EXE_CONTINUE
endAugment

augment StackPopObject
  METHODS
    #{
    method execute->Int32
      local status = operand.execute
      if (status) return status
      Program.object_stack.remove_last
      return EXE_CONTINUE
      }#
endAugment

augment StackPopReal64
  METHODS
    method execute->Int32
      local status = operand.execute
      if (status) return status
      Program.real64_stack.remove_last
      return EXE_CONTINUE
endAugment

augment StackPopString
  METHODS
    method execute->Int32
      local status = operand.execute
      if (status) return status
      Program.string_stack.remove_last
      return EXE_CONTINUE
endAugment
