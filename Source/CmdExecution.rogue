module Boss

augment Cmd
  METHODS
    method execute->Logical
      throw t.error( "[INTERNAL] $.execute() is undefined."(type_name) )
endAugment

augment CmdList
  METHODS
    method execute->Logical
      forEach (cmd in list)
        if (not cmd.execute) return false
      endForEach
      return true
endAugment

augment AddInt32
  METHODS
    method execute->Logical
      if (not left.execute) return false
      local a = Program.result_Int32

      if (not right.execute) return false
      Program.result_Int32 += a
      return true
endAugment

augment DescriptionInt32
  METHODS
    method execute->Logical
      if (not operand.execute) return false
      Program.result_String = Program.result_Int32->String
      return true
endAugment

augment LiteralString
  METHODS
    method execute->Logical
      Program.result_String = value
      return true
endAugment

augment LiteralLogical
  METHODS
    method execute->Logical
      Program.result_Int32 = which{ value:1 || 0 }
      return true
endAugment

augment LiteralByte
  METHODS
    method execute->Logical
      Program.result_Int32 = value
      return true
endAugment

augment LiteralCharacter
  METHODS
    method execute->Logical
      Program.result_Int32 = value
      return true
endAugment

augment LiteralInt32
  METHODS
    method execute->Logical
      Program.result_Int32 = value
      return true
endAugment

augment LiteralReal32
  METHODS
    method execute->Logical
      Program.result_Real64 = value
      return true
endAugment

augment LiteralReal64
  METHODS
    method execute->Logical
      Program.result_Real64 = value
      return true
endAugment

augment LiteralPi
  METHODS
    method execute->Logical
      Program.result_Real64 = pi
      return true
endAugment

augment Print
  METHODS
    method execute->Logical
      forEach (cmd in args.list)
        if (not cmd.execute) return false
        print Program.result_String
      endForEach
      return true
endAugment

augment Println
  METHODS
    method execute->Logical
      forEach (cmd in args.list)
        if (not cmd.execute) return false
        print Program.result_String
      endForEach
      println
      return true
endAugment

#{
augment StackPopInt32
  METHODS
    method execute->Logical
      local status = operand.execute
      if (status) return status
      Program.int32_stack.remove_last
      return EXE_CONTINUE
endAugment

augment StackPopObject
  METHODS
    #{
    method execute->Logical
      local status = operand.execute
      if (status) return status
      Program.object_stack.remove_last
      return EXE_CONTINUE
      }#
endAugment

augment StackPopReal64
  METHODS
    method execute->Logical
      local status = operand.execute
      if (status) return status
      Program.real64_stack.remove_last
      return EXE_CONTINUE
endAugment

augment StackPopString
  METHODS
    method execute->Logical
      local status = operand.execute
      if (status) return status
      Program.string_stack.remove_last
      return EXE_CONTINUE
endAugment
}#
