module Boss

class Program [singleton]
  DEFINITIONS
    EXE_CONTINUE  = 0
    EXE_ERROR     = 1
    EXE_RETURN    = 2

  GLOBAL PROPERTIES
    execution_status : Int32
    execution_result : BossValue
    execution_error  : Error

  PROPERTIES
    t              : Token

    is_configured  = false

    type_Logical   : Type
    type_Character : Type
    type_Int32     : Type
    type_Real64    : Type
    type_String    : Type
    type_Value     : Type

    type_Object    : Type
    type_Global    : Type

    parsed_files   = StringTable<<AST>>()

    default_module    : Module
    global_module     : Module
    current_module    : Module
    all_modules       = Module[]
    modules_by_name   = StringTable<<Module>>()

    stack             = BossValue[]
    fp                : Int32

  METHODS
    method init
      t = Token( TokenType.EOI, "Boss" )

      default_module = Module( t, "Default" )
      global_module  = Module( t, "Global" )
      default_module.uses_module( global_module )

      current_module = global_module
      type_Logical   = TypeLogical(t)
      type_Character = TypeCharacter(t)
      type_Int32     = TypeInt32(t)
      type_Real64    = TypeReal64(t)
      type_String    = TypeString(t)
      type_Value     = TypeValue(t)
      type_Object    = Type( t, "Object" )
      type_Global    = Type( t, "Global" )

    method create_dynamic_module( t:Token, name:String )->Module
      name = File.filename(name).before_last(".boss")
      return Module( t, name, &dynamic )

    method execute( procedure:Procedure, args:Cmd )->Logical
      temporarily fp = stack.count
        if (args)
          forEach (arg in args)
            if (not arg.execute) return false
            stack.add( execution_result )
          endForEach
        endIf
        stack.expand( procedure.local_stack_slots )

        local status = procedure.statements.execute
        stack.count = fp
        if (status) return true
        if (execution_status != EXE_RETURN) return false
        execution_status = EXE_CONTINUE
        return true
      endTemporarily

    method execute( context:BossObject, procedure:Procedure, args:Cmd )->Logical
      temporarily fp = stack.count
        stack.add( context )
        if (args)
          forEach (arg in args)
            if (not arg.execute) return false
            stack.add( execution_result )
          endForEach
        endIf
        stack.expand( procedure.local_stack_slots )

        local status = procedure.statements.execute
        stack.count = fp
        if (status) return true
        if (execution_status != EXE_RETURN) return false
        execution_status = EXE_CONTINUE
        return true
      endTemporarily

    method find_module( name:String )->Module
      return modules_by_name[ name ]

    method find_module( t:Token, name:String )->Module
      if (name is null)
        return default_module
      elseIf (modules_by_name.contains(name))
        return modules_by_name[ name ]
      else
        return Module( t, name )  # Module adds itself to lookup tables.
      endIf

    method find_type( name:String )->Type
      if (name.contains("::"))
        local m = find_module( name.before_first("::") )
        return m.find_type( name.after_first("::") )
      else
        local type = default_module.find_type( name )
        if (type) return type
        return global_module.find_type( name )
      endIf

    method import( t:Token, filepath:String )->Logical
      try
        local m = create_dynamic_module( t, filepath )
        Program.include( filepath, m )
        return m.execute
      catch (err:Error)
        Program.execution_status = EXE_ERROR
        execution_error = err
        return false
      endTry

    method include( filepath:String, module_context=Program.default_module:Module )
      include( t, filepath, module_context )

    method include( t:Token, filepath:String, module_context=Program.default_module:Module )
      filepath .= with_trailing( ".boss" )

      local is_static = not module_context.is_dynamic
      if (is_static and parsed_files.contains(filepath)) return

      if (not File.exists(filepath))
        throw t.error( "No such file '$'."(filepath) )
      endIf

      filepath = File.abs( filepath )
      if (is_static and parsed_files.contains(filepath)) return

      # placeholders to avoid recursive includes
      if (is_static) parsed_files[ filepath ] = null

      temporarily current_module = module_context
        local tokens = Scanner( File(filepath) ).tokenize
        preprocess( tokens )

        local ast = Parser(tokens).parse->(as AST)
        if (is_static) parsed_files[ filepath ] = ast
        if (ast)
          Collector().visit( ast )
        endIf
      endTemporarily

    method launch
      resolve
      (forEach in all_modules).execute
      if (execution_status == EXE_ERROR)
        if (not execution_error) execution_error = t.error( "[INTERNAL] Unknown error." )
        throw execution_error
      endIf
      require stack.is_empty
      require fp == 0

    method preprocess( tokens:Token[] )
      noAction

    method resolve
      (forEach in all_modules).resolve

    method set_current_module( @current_module )

    method set_current_module( t:Token, name:String )
      if (name is null)
        @current_module = default_module
      elseIf (modules_by_name.contains(name))
        @current_module = modules_by_name[ name ]
      else
        @current_module = Module( t, name )
      endIf

endClass

