module Boss

class Program [singleton]
  DEFINITIONS
    EXE_CONTINUE  = 0
    EXE_EXCEPTION = 1
    EXE_RETURN    = 2

  GLOBAL PROPERTIES
    execution_status : Int32
    result_Int32     : Int32
    result_Real64    : Real64
    result_String    : String

  PROPERTIES
    t              : Token

    is_configured  = false

    type_Logical   : Type
    type_Character : Type
    type_Int32     : Type
    type_Real64    : Type
    type_String    : Type
    type_Value     : Type

    type_Object    : Type
    type_Global    : Type

    parsed_files   = StringTable<<AST>>()

    default_module    : Module
    global_module     : Module
    current_module    : Module
    all_modules       = Module[]
    modules_by_name   = StringTable<<Module>>()

    stack             = BossValue[]
    fp                : Int32

  METHODS
    method init
      t = Token( TokenType.EOI, "Boss" )

      default_module = Module( t, "Default" )
      global_module  = Module( t, "Global" )
      default_module.use_module( global_module )

      current_module = global_module
      type_Logical   = TypeLogical(t)
      type_Character = TypeCharacter(t)
      type_Int32     = TypeInt32(t)
      type_Real64    = TypeReal64(t)
      type_String    = TypeString(t)
      type_Value     = TypeValue(t)
      type_Object    = Type( t, "Object" )
      type_Global    = Type( t, "Global" )

    method include( filepath:String )
      if (parsed_files.contains(filepath)) return

      if (not File.exists(filepath))
        throw t.error( "No such file '$'."(filepath) )
      endIf

      filepath = File.abs( filepath )
      if (parsed_files.contains(filepath)) return
      parsed_files[ filepath ] = null # placeholder to avoid recursive includes

      current_module = default_module

      local tokens = Scanner( File(filepath) ).tokenize
      preprocess( tokens )

      local ast = Parser(tokens).parse->(as AST)
      parsed_files[ filepath ] = ast
      if (ast)
        (forEach in ast.elements).organize_element
      endIf

    method launch
      resolve
      (forEach in all_modules).launch
      require stack.is_empty
      require fp == 0


      #{
    method load( file:File )->Module
      local filepath = file.filepath
      if (modules_by_filepath.contains(filepath))
        # First check unmodified path in case of any special mappings
        return modules_by_filepath[ filepath ]
      endIf

      if (not file.exists)
        local message = "No such file '$'."(file.filepath)
        if (is_configured) throw t.error( message )
        else               throw CompileError( message )
      endIf

      filepath = file.abs
      if (modules_by_filepath.contains(filepath))
        return modules_by_filepath[ filepath ]
      endIf

      return Module( File(filepath) )
      }#

    method preprocess( tokens:Token[] )
      noAction

    method resolve
      (forEach in all_modules).organize_types
      (forEach in all_modules).organize_methods
      (forEach in all_modules).resolve

    method set_current_module( @current_module )

    method set_current_module( t:Token, name:String )
      if (name is null)
        @current_module = default_module
      elseIf (modules_by_name.contains(name))
        @current_module = modules_by_name[ name ]
      else
        @current_module = Module( t, name )
      endIf

endClass

