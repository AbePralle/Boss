module Boss

uses Bitmap [export]
uses Geometry [export]

class BossValue( type:Int32, x:Real64, y:Real64, a:Real64, b:Real64, object:Object ) [compound]
  ENUMERATE
    TYPE_UNDEFINED
    TYPE_NULL
    TYPE_LOGICAL
    TYPE_CHARACTER
    TYPE_INT32
    TYPE_REAL64
    TYPE_STRING
    TYPE_BOSS_OBJECT
    TYPE_NATIVE_OBJECT
    TYPE_LIST
    TYPE_TABLE
    TYPE_XY
    TYPE_BOX

    TYPE_LAST_INTEGER = TYPE_INT32
    TYPE_LAST_NUMBER  = TYPE_REAL64
    TYPE_LAST_OBJECT  = TYPE_TABLE

    # case TYPE_UNDEFINED
    # case TYPE_NULL
    # case TYPE_LOGICAL
    # case TYPE_CHARACTER
    # case TYPE_INT32
    # case TYPE_REAL64
    # case TYPE_STRING
    # case TYPE_BOSS_OBJECT
    # case TYPE_NATIVE_OBJECT
    # case TYPE_LIST
    # case TYPE_TABLE
    # case TYPE_XY
    # case TYPE_BOX

    #ENUMERATE
    #FORMATTED = 1
    #OMIT_COMMAS = 2

  GLOBAL METHODS
    method create->BossValue
      return BossValue(TYPE_UNDEFINED,0,0,0,0,null)

    method create( object:BossObject )->BossValue
      if (object)
        return BossValue(TYPE_BOSS_OBJECT,0,0,0,0,object)
      else
        return BossValue(TYPE_NULL,0,0,0,0,null)
      endIf

    method create( value:Character )->BossValue
      return BossValue(TYPE_CHARACTER,value,0,0,0,null)

    method create( value:Int32 )->BossValue
      return BossValue(TYPE_INT32,value,0,0,0,null)

    method create( value:Logical )->BossValue
      return BossValue(TYPE_LOGICAL,which{value:1||0},0,0,0,null)

    method create( value:Real64 )->BossValue
      return BossValue(TYPE_REAL64,value,0,0,0,null)

    method create( value:String )->BossValue
      if (value) return BossValue(TYPE_STRING,0,0,0,0,value)
      else       return BossValue(TYPE_NULL,0,0,0,0,null)

    method create( object:Object )->BossValue
      if (object)
        block obj = object->(as String)
          if (obj) return BossValue( obj )
        endBlock
        block obj = object->(as BossObject)
          if (obj) return BossValue( TYPE_BOSS_OBJECT, 0, 0, 0, 0, obj )
        endBlock
        return BossValue(TYPE_NATIVE_OBJECT,0,0,0,0,object)
      else
        return BossValue(TYPE_NULL,0,0,0,0,null)
      endIf

    method create( value:XY )->BossValue
      return BossValue( TYPE_XY, value.x, value.y, 0, 0, null )

    method create( value:Box )->BossValue
      return BossValue( TYPE_BOX, value.position.x, value.position.y, value.size.x, value.size.y, null )

    method list( data=BossValue[]:BossValue[] )->BossValue
      return BossValue(TYPE_LIST,0,0,0,0,data)


    #{ FIXME
    method load( file:File )->BossValue
      return JSON.load( file )

    method parse( json:String )->BossValue
      return JSON.parse( json )
    }#

    method operator?( value:BossValue )->Logical
      local type = value.type
      if (type <= TYPE_LAST_NUMBER) return value.x?
      if (type <= TYPE_XY)        return true  # includes objects and XY
      which (value.type)
        case TYPE_BOX: return (value.a == 0 and value.b == 0) # width and height are zero
        others: throw UnsupportedOperationError( "[INTERNAL] BossValue operator? type $."(type) )
      endWhich

    method table( data=StringTable<<BossValue>>():StringTable<<BossValue>> )->BossValue
      return BossValue(TYPE_TABLE,0,0,0,0,data)

  METHODS
    method add( value:BossValue )
      which (type)
        case TYPE_LIST:  object->(as BossValue[]).add( value )
      endWhich

    method description->String
      which (type)
        case TYPE_UNDEFINED: return "undefined"
        case TYPE_NULL:      return "null"
        case TYPE_LOGICAL:   return which{ x:"true" || "false"}
        case TYPE_CHARACTER: return %x->Int32->Character->String
        case TYPE_INT32:     return %x->Int32
        case TYPE_REAL64:    return %x
        case TYPE_XY:        return %this->XY
        case TYPE_BOX:       return %this->Box

        case TYPE_BOSS_OBJECT: return "BossObject($)"(object->(as BossObject).type.name)

        others:              return %object
      endWhich

    method count->Int32
      which (type)
        case TYPE_STRING:    return this->String.count
        case TYPE_LIST:      return this.object->(as BossValue[]).count
        case TYPE_TABLE:     return this.object->(as StringTable<<BossValue>>).count
        others:              return 0
      endWhich

    method get( index:Int32 )->BossValue
      if (index < 0 or index >= count) return BossValue()
      which (type)
        case TYPE_STRING:    return this->String[index]
        case TYPE_LIST:      return this.object->(as BossValue[])[index]
        case TYPE_TABLE:     return this.object->(as StringTable<<BossValue>>).at(index)
        others:              return BossValue()
      endWhich

    method operator-()->BossValue
      which (type)
        case TYPE_INT32:  return BossValue( -(x->Int32) )
        case TYPE_REAL64: return BossValue( -x )
        case TYPE_XY:     return BossValue( XY(-x,-y) )
        others:           return BossValue()
      endWhich

    method operator+( other:BossValue )->BossValue
      which (type)
        case TYPE_UNDEFINED
          if (other.type == TYPE_STRING) return BossValue( "undefined" + other.object )
          return this

        case TYPE_NULL
          if (other.type == TYPE_STRING) return BossValue( "null" + other.object )
          return BossValue()

        case TYPE_LOGICAL
          which (other.type)
            case TYPE_LOGICAL: return BossValue( this->Logical or other->Logical )
            case TYPE_STRING:  return BossValue( this->String + other.object )
          endWhich

        case TYPE_CHARACTER
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32:     return BossValue( (x + other.x)->Int32 )
            case TYPE_REAL64:    return BossValue( x + other.x )
            case TYPE_STRING:    return BossValue( "$$"(Character(x),other.object) )
          endWhich

        case TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32:     return BossValue( (x + other.x)->Int32 )
            case TYPE_REAL64:    return BossValue( x + other.x )
            case TYPE_STRING:    return BossValue( x->Int32->String + other.object )
          endWhich

        case TYPE_REAL64
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32,
                 TYPE_REAL64:    return BossValue( x + other.x )
            case TYPE_STRING:    return BossValue( x->String + other.object )
          endWhich

        case TYPE_STRING
          return BossValue( this->String + other->String )

        case TYPE_BOSS_OBJECT, TYPE_NATIVE_OBJECT
          return BossValue()

        case TYPE_LIST
          which (other.type)
            case TYPE_LIST
              local result_list  = object->(as BossValue[]).cloned
              local other_list = other.object->(as BossValue[])
              result_list.add( other_list )
              return BossValue.list( result_list )
          endWhich

        case TYPE_TABLE
          which (other.type)
            case TYPE_TABLE
              local result_table = StringTable<<BossValue>>( object->(as StringTable<<BossValue>>) )
              local other_table  = other.object->(as StringTable<<BossValue>>)
              forEach (entry in other_table.entries)
                result_table[entry.key] = entry.value
              endForEach
              return BossValue.table( result_table )
          endWhich

        case TYPE_XY
          which (other.type)
            case TYPE_XY
              return BossValue( XY(x+other.x,y+other.y) )
          endWhich

        case TYPE_BOX
          which (other.type)
            case TYPE_XY
              return BossValue( Box(x+other.x,y+other.y,a,b) )
            case TYPE_BOX
              return BossValue( this->Box | other->Box )
          endWhich
      endWhich

      return BossValue()

    method operator*( other:BossValue )->BossValue
      which (type)
        case TYPE_LOGICAL
          which (other.type)
            case TYPE_LOGICAL: return BossValue( this->Logical and other->Logical )
          endWhich

        case TYPE_CHARACTER
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32:     return BossValue( (x * other.x)->Int32 )
            case TYPE_REAL64:    return BossValue( x * other.x )
          endWhich

        case TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32:     return BossValue( (x * other.x)->Int32 )
            case TYPE_REAL64:    return BossValue( x * other.x )
            case TYPE_STRING:    return BossValue( other->String * x->Int32 )
          endWhich

        case TYPE_REAL64
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32,
                 TYPE_REAL64:    return BossValue( x + other.x )
          endWhich

        case TYPE_XY
          which (other.type)
            case TYPE_XY
              return BossValue( XY(x*other.x,y*other.y) )
          endWhich

        case TYPE_BOX
          which (other.type)
            case TYPE_XY
              return BossValue( Box(x*other.x,y*other.y,a*other.x,b*other.y) )
            case TYPE_BOX
              return BossValue( this->Box & other->Box )
          endWhich
      endWhich

      return BossValue()

    method operator/( other:BossValue )->BossValue
      which (type)
        case TYPE_CHARACTER, TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32
              local divisor = other.x->Int32
              if (divisor) return BossValue( (x / other.x)->Int32 )
              else         return BossValue( (x / other.x) )
            case TYPE_REAL64:    return BossValue( x / other.x )
          endWhich

        case TYPE_REAL64
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32,
                 TYPE_REAL64:    return BossValue( x / other.x )
          endWhich

        case TYPE_STRING
          which (other.type)
            case TYPE_STRING: return BossValue( this->String / other->String )
          endWhich

        case TYPE_XY
          which (other.type)
            case TYPE_XY
              return BossValue( XY(x/other.x,y/other.y) )
          endWhich

        case TYPE_BOX
          which (other.type)
            case TYPE_XY
              return BossValue( Box(x/other.x,y/other.y,a/other.x,b/other.y) )
          endWhich
      endWhich

      return BossValue()

    method operator%( other:BossValue )->BossValue
      which (type)
        case TYPE_CHARACTER, TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32
              local divisor = other.x->Int32
              if (divisor) return BossValue( x->Int32 % other.x->Int32 )
              else         return BossValue( x->Int32 % other.x->Int32 )
            case TYPE_REAL64:    return BossValue( x % other.x )
          endWhich

        case TYPE_REAL64
          which (other.type)
            case TYPE_CHARACTER,
                 TYPE_INT32,
                 TYPE_REAL64:    return BossValue( x % other.x )
          endWhich

        case TYPE_XY
          which (other.type)
            case TYPE_XY
              return BossValue( XY(x%other.x,y%other.y) )
          endWhich
      endWhich

      return BossValue()

    method operator:<<:( other:BossValue )->BossValue
      which (type)
        case TYPE_CHARACTER, TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER, TYPE_INT32
              return BossValue( x->Int32 :<<: other.x->Int32 )
          endWhich
      endWhich

      return BossValue()

    method operator:>>:( other:BossValue )->BossValue
      which (type)
        case TYPE_CHARACTER, TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER, TYPE_INT32
              return BossValue( x->Int32 :>>: other.x->Int32 )
          endWhich
      endWhich

      return BossValue()

    method operator:>>>:( other:BossValue )->BossValue
      which (type)
        case TYPE_CHARACTER, TYPE_INT32
          which (other.type)
            case TYPE_CHARACTER, TYPE_INT32
              return BossValue( x->Int32 :>>>: other.x->Int32 )
          endWhich
      endWhich

      return BossValue()

    method remove_first->BossValue
      if (count == 0) return BossValue()
      which (type)
        case TYPE_LIST
          return this.object->(as BossValue[]).remove_first
        case TYPE_TABLE
          local table = this.object->(as StringTable<<BossValue>>)
          return table.remove( table.first_entry.key )
        others
          return BossValue()
      endWhich

    method remove_last->BossValue
      if (count == 0) return BossValue()
      which (type)
        case TYPE_LIST
          return this.object->(as BossValue[]).remove_last
        case TYPE_TABLE
          local table = this.object->(as StringTable<<BossValue>>)
          return table.remove( table.last_entry.key )
        others
          return BossValue()
      endWhich

    method resize( new_size:Int32 )
      which (type)
        case TYPE_LIST
          this.object->(as BossValue[]).resize( new_size )
      endWhich

    method set( index:Int32, value:BossValue )
      which (type)
        case TYPE_LIST
          if (index < 0 or index >= count) return
          this.object->(as BossValue[])[index] = value
        case TYPE_TABLE
          this.object->(as StringTable<<BossValue>>)[ index+"" ] = value
      endWhich

    method set( key:String, value:BossValue )
      which (type)
        case TYPE_TABLE
          this.object->(as StringTable<<BossValue>>)[ key ] = value
      endWhich

    method shuffle
      which (type)
        case TYPE_LIST
          this.object->(as BossValue[]).shuffle
        case TYPE_TABLE
          # TODO
      endWhich

    method to->BossObject
      return object->(as BossObject)

    method to->Int32
      if (type > TYPE_LAST_NUMBER) return 0
      return x->Int32

    method to->Object
      return object

    method to->XY
      return XY(x,y)

    method to->Box
      return Box(x,y,a,b)

endClass

