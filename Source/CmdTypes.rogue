module Boss

augment Cmd
  GLOBAL METHODS
    method common_type( a:Type, b:Type )->Type
      if (a is b) return a
      if (not a or not b) return null
      if (a.is_primitive and b.is_primitive)
        local type = Program.type_String
        if (a is type or b is type) return type
        type = Program.type_Real64
        if (a is type or b is type) return type
        type = Program.type_Real32
        if (a is type or b is type) return type
        return Program.type_Int32  # any mismatched pair Byte/Character/Int32 -> Int32
      else
        return Program.type_String # Placeholder/TODO
      endIf

  METHODS
    method create_call( context:Cmd, args:Cmd )->Cmd
      throw t.error( "[INTERNAL] $.create_call() is undefined."(type_name) )

    method organize_element
      throw t.error( "[INTERNAL] $.organize_element() is undefined." (type_name) )

    method require_type->Type
      local result = type
      if (result) return result
      throw t.error( "Value expected." )

    method require_value->Cmd
      require_type
      return this

    method type->Type
      return null
endAugment

augment
  METHODS
    method Unary.type->Type
      return operand.type

    method Binary.type->Type
      return common_type( left.type, right.type )

    method CallRoutine.type->Type
      return r.return_type

    method DefineModule.organize_element
      Program.set_current_module( t, name )

    method DescriptionInt32.type->Type
      return Program.type_String

    method DescriptionLogical.type->Type
      return Program.type_String

    method DescriptionObject.type->Type
      return Program.type_String

    method DescriptionReal64.type->Type
      return Program.type_String

    method LiteralString.type->Type
      return Program.type_String

    method LiteralLogical.type->Type
      return Program.type_Logical

    method LiteralByte.type->Type
      return Program.type_Byte

    method LiteralCharacter.type->Type
      return Program.type_Character

    method LiteralInt32.type->Type
      return Program.type_Int32

    method LiteralReal32.type->Type
      return Program.type_Real32

    method LiteralReal64.type->Type
      return Program.type_Real64

    method LiteralPi.type->Type
      return Program.type_Real64

    method Routine.create_call( context:Cmd, args:Cmd )->Cmd
      return CallRoutine( t, this, args )

    method Routine.organize_element
      Program.current_module.routines.add( this )

    method Statements.organize_element
      Program.current_module.global_statements.add( this )

endAugment
