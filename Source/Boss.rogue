module Boss

$include "Macros.rogue"

$include "BossObject.rogue"
$include "BossValue.rogue"
$include "Candidates.rogue"
$include "Collector.rogue"
$include "CmdExecution.rogue"
$include "CmdTypes.rogue"
$include "Module.rogue"
$include "Organizer.rogue"
$include "Parser.rogue"
$include "Program.rogue"
$include "Resolver.rogue"
$include "Scanner.rogue"
$include "Type.rogue"
uses Boss
uses Utility/CommandLineParser

try
  Boss( System.command_line_arguments )

catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  Console.error.println error
  Console.error.println error.stack_trace
  System.exit 1
endTry

class Boss
  PROPERTIES
    command : Value

  METHODS
    method init( args:String[] )
      command = parse_args( args )

      if (command//options//help or command//args.count == 0)
        print_usage
        System.exit 0
      endIf

      register_native_code

      parse_files

    method parse_files
      Program.include( forEach in command//args )
      Program.launch

    method parse_args( args:String[] )->Value
      # This method is unrelated to the Froley Parser
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println @|USAGE
               |  boss [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.

    method register_native_code
      register_console
      register_lists
      register_random
      register_value

    method register_console
      Program.type("Console")
      Program.register( "Console:height->Int32", () => Console.height )
      Program.register( "Console:width->Int32",  () => Console.width )

    method register_lists
      register_list_character
      register_list_int32

    method register_list_character
      register_list<<Character>>
      Program.register( "Character[].add(Character)",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, Character[] )
          local value = Program.arg(1).x->Int32->Character
          list.add( value )
          return true
        endFunction )
      Program.register( "Character[].fill(Character)",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, Character[] )
          local value = Program.arg(1).x->Int32->Character
          list.fill( value )
          return true
        endFunction )
      Program.register( "Character[].set(Int32,Character)",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, Character[] )
          BOSS_ARG_INT32( index, 1 )
          BOSS_ARG_CHARACTER( new_value, 2 )
          if (index < 0 or index >= list.count) return Program.error_oob(index,list.count)
          list[index] = new_value
          return true
        endFunction )

    method register_list_int32
      register_list<<Int32>>
      Program.register( "Int32[].add(Int32)",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, Int32[] )
          local value = Program.arg(1).x->Int32
          list.add( value )
          return true
        endFunction )
      Program.register( "Int32[].fill(Int32)",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, Int32[] )
          local value = Program.arg(1).x->Int32
          list.fill( value )
          return true
        endFunction )
      Program.register( "Int32[].set(Int32,Int32)",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, Int32[] )
          BOSS_ARG_INT32( index, 1 )
          BOSS_ARG_INT32( new_value, 2 )
          if (index < 0 or index >= list.count) return Program.error_oob(index,list.count)
          list[index] = new_value
          return true
        endFunction )

    method register_list<<$Type>>
      local element_name = $string($Type)
      local name = element_name + "[]"
      Program.type(name)
      Program.type(name).add_property( "list", "NativeObject" )
      Program.register( "$.init"(name),
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          context.properties[0] = BossValue( $Type[] )
          return true
        endFunction )
      Program.register( "$.count->Int32"(name),
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, $Type[] )
          return list.count
        endFunction )
      Program.register( "$.description->String"(name),
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, $Type[] )
          local result = %list
          return result
        endFunction )
      Program.register( "$.get(Int32)->$"(name,element_name),
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, $Type[] )
          BOSS_ARG_INT32( index, 1 )
          if (index < 0 or index >= list.count) return Program.error_oob(index,list.count)
          return list[index]
        endFunction )
      Program.register( "$.resize(Int32)"(name),
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( list, context, 0, $Type[] )
          BOSS_ARG_INT32( new_size, 1 )
          list.resize( new_size )
          return true
        endFunction )

    method register_random
      Program.type("Random").is_singleton = true
      Program.type("Random").add_property( "native_random", "NativeObject" )
      Program.register( "Random.init",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          context.properties[0] = BossValue( Random() )
          return true
        endFunction )
      Program.register( "Random.int32->Int32",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( random, context, 0, Random )
          return random.int32
        endFunction )
      Program.register( "Random.int32(Int32)->Int32",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_ARG_INT32( limit, 1 )
          BOSS_PROPERTY_NATIVE_OBJECT( random, context, 0, Random )
          return random.int32(limit->Int32)
        endFunction )
      Program.register( "Random.int32(Int32,Int32)->Int32",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_ARG_INT32( low, 1 )
          BOSS_ARG_INT32( high, 2 )
          BOSS_PROPERTY_NATIVE_OBJECT( random, context, 0, Random )
          return random.int32( low, high )
        endFunction )
      Program.register( "Random.logical->Logical",
        function->BossValue
          BOSS_CONTEXT_OBJECT( context )
          BOSS_PROPERTY_NATIVE_OBJECT( random, context, 0, Random )
          return random.logical
        endFunction )

    method register_value
      Program.register( "Value.add(Value)",
        function->BossValue
          BOSS_CONTEXT_VALUE( value )
          BOSS_ARG_VALUE( arg, 1 )
          value.add( arg )
          return true
        endFunction )
endClass

