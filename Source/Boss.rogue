module Boss

$include "Macros.rogue"

$include "BossObject.rogue"
$include "BossValue.rogue"
$include "Candidates.rogue"
$include "Collector.rogue"
$include "CmdExecution.rogue"
$include "CmdTypes.rogue"
$include "Module.rogue"
$include "Organizer.rogue"
$include "Parser.rogue"
$include "Program.rogue"
$include "Resolver.rogue"
$include "Scanner.rogue"
$include "Type.rogue"
uses Boss
uses Utility/CommandLineParser

try
  Boss( System.command_line_arguments )

catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  Console.error.println error
  Console.error.println error.stack_trace
  System.exit 1
endTry

class Boss
  PROPERTIES
    command : Value

  METHODS
    method init( args:String[] )
      command = parse_args( args )

      if (command//options//help or command//args.count == 0)
        print_usage
        System.exit 0
      endIf

      register_native_code

      parse_files

    method parse_files
      Program.include( forEach in command//args )
      Program.launch

    method parse_args( args:String[] )->Value
      # This method is unrelated to the Froley Parser
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println @|USAGE
               |  boss [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.

    method register_native_code
      register_random

    method register_random
      #Program.register( "Random:create()->Random", () => Random() )
      Program.register( "Random.init", (context) => println "TODO: Random.init"; return true )
      Program.register( "Random.int32->Int32",        () => Random.int32 )
      Program.register( "Random.int32(Int32)->Int32", (context,limit) => Random.int32(limit) )
      Program.register( "Random.int32(Int32,Int32)->Int32", (context,low,high) => Random.int32(low,high) )
endClass

