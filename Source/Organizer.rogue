module Boss

class Organizer : Visitor
  PROPERTIES
    this_module    : Module
    this_type      : Type
    this_procedure : Procedure

    current_statements_rewriter : ListRewriter<<Cmd>>

  METHODS
    method init( this_module )

    method visit( type:Type )
      if (type.is_organized) return
      type.is_organized = true

      this_type = type

      if (type.definition)
        local constructor_properties = type.definition.constructor_properties
        if (constructor_properties)
          local m_init = Method( constructor_properties.t, type, "init" )
          type.add( m_init )

          forEach (p in constructor_properties)
            block p = p->(as LocalDef)->Local
              p.is_parameter = true
              p.is_auto_store = true
              m_init.parameters.add( p )
              if (p.@type)
                type.properties[ p.name ] = Property( p.t, type, p.name, p.initial_value, p.@type )
              endIf
            endBlock
          endForEach
        endIf
      endIf

      # Assign property indices
      forEach (p at i in this_type.properties)
        p.index = i
      endForEach

    method visit( this_type, this_procedure )
      visit( this_procedure )

    method on_visit( cmd:Local )
      if (cmd.fp_offset == -1)
        cmd.fp_offset = this_procedure.locals.count + which{ this_procedure.is_global:0 || 1 }
        cmd.is_parameter = cmd.fp_offset < this_procedure.parameters.count
        this_procedure.locals.add( cmd )
      endIf
      visit_children( cmd )

    method on( cmd:LocalDeclarations )->Cmd
      if (cmd.type_ref)
        local var_type = cmd.type_ref->Type
        forEach (v in cmd.declarations)
          block v = v->(as LocalDef)->Local
            v.type = var_type
            block v = visit( v )
              if (v) current_statements_rewriter.write( v )
            endBlock
          endBlock
        endForEach
      else
        forEach (v in cmd.declarations)
          v = visit( v->(as LocalDef)->Local )
          if (v) current_statements_rewriter.write( v )
        endForEach
      endIf
      return null

    method on_visit( cmd:Method )
      if (cmd.is_organized) return
      cmd.is_organized = true

      on_visit( cmd->(as Procedure) )
      visit_children( cmd )

      local sig = cmd.signature
      if (cmd.type_context.methods_by_signature.contains(sig))
        throw cmd.t.error( "Type $ already defines method $."(cmd.type_context.name,sig) )
      endIf
      cmd.type_context.methods_by_signature[ sig ] = cmd

    method on_visit( cmd:Procedure )
      use builder = StringBuilder.pool
        builder.print cmd.name
        builder.print '('
        forEach (param at i in cmd.parameters)
          if (i > 0) builder.print ','
          builder.print param.type.name
        endForEach
        builder.print ')'
        cmd.signature = builder->String
      endUse

    method on_visit( cmd:Routine )
      if (cmd.is_organized) return
      cmd.is_organized = true

      on_visit( cmd->(as Procedure) )
      visit_children( cmd )

      local sig = cmd.signature
      if (this_module.routines_by_signature.contains(sig))
        throw cmd.t.error( "Module $ already defines routine $."(this_module.name,sig) )
      endIf
      this_module.routines_by_signature[ sig ] = cmd

    method on_visit( cmd:Statements )
      temporarily current_statements_rewriter = cmd.list.rewriter
        forEach (element in current_statements_rewriter)
          local visited_element = visit( element )
          if (visited_element) current_statements_rewriter.write( visited_element )
        endForEach
      endTemporarily
endClass

augment
  METHODS
    method Type.organize
      if (is_organized) return
      Organizer( module_context ).visit( this )

    method Type.resolve
      if (is_resolved) return
      Resolver( module_context ).visit( this )
endAugment

