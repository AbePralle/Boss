module Boss

class Resolver : Visitor
  PROPERTIES

  METHODS
    method on( cmd:Add )->Cmd
      visit_children( cmd )
      local left = cmd.left
      local right = cmd.right
      local left_type = left.require_type
      local right_type = right.require_type
      local result_type = Cmd.common_type( left_type, right_type )
      if (left_type is not result_type) left = visit( result_type.cmd_cast(left) )
      if (right_type is not result_type) right = visit( result_type.cmd_cast(right) )
      local t = cmd.t
      which (result_type.op_type)
        case OpType.INT32:  return AddInt32(t,left,right)
        case OpType.REAL64: return AddReal64(t,left,right)
        case OpType.STRING: return AddString(t,left,right)
        case OpType.OBJECT: return AddObject(t,left,right)
        others:             throw t.error( "TODO: Add LOGICAL" )
      endWhich

    method on( cmd:Description )->Cmd
      local operand = visit( cmd.operand ).require_value
      local type = operand.type
      local t = cmd.t
      which (type.op_type)
        case OpType.INT32:  return DescriptionInt32(t,operand)
        case OpType.REAL64: return DescriptionReal64(t,operand)
        case OpType.STRING: return operand
        case OpType.OBJECT: return DescriptionObject(t,operand)
        others:             return DescriptionLogical(t,operand)
      endWhich

    method on_visit( cmd:Statements )
      forEach (arg in rewriter=cmd.list.rewriter)
        arg = visit( arg )
        if (arg) rewriter.write( arg )
        #local type = arg.type
        #if (type) arg = type.cmd_stack_pop( arg )
      endForEach

    method on_visit( cmd:Print )
      forEach (arg in rewriter=cmd.args.list.rewriter)
        arg = visit( Description(arg.t,arg) ).require_value
        if (arg) rewriter.write( arg )
      endForEach

      if (cmd.args.count == 0) throw cmd.t.error( "One or more arguments expected." )

    method on_leave( cmd:Println )
      forEach (arg in rewriter=cmd.args.list.rewriter)
        arg = visit( Description(arg.t,arg) ).require_value
        if (arg) rewriter.write( arg )
      endForEach
endClass

