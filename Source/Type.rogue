module Boss

class Type
  GLOBAL METHODS
    method create( t:Token, name:String )->Type
      local entry = Program.current_module.types.find( name )
      if (entry) return entry.value

      local type = Type( t, name, &!is_primitive )
      return type

  PROPERTIES
    context_module : Module
    t              : Token
    name           : String
    is_primitive   : Logical

    #global_methods_by_name

  METHODS
    method init( t, name, is_primitive )
      context_module = Program.current_module
      Program.current_module.types[ name ] = this

    method description->String
      return name

    method is_reference->Logical
      return (not is_primitive)
endClass

class TypePrimitive : Type
endClass

class TypeLogical : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Logical", &is_primitive )
endClass

class TypeCharacter : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Character", &is_primitive )
endClass

class TypeInt32 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Int32", &is_primitive )
endClass

class TypeReal64 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Real64", &is_primitive )
endClass

class TypeString : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "String", &is_primitive )
endClass

class TypeValue : Type
  METHODS
    method init( t:Token )
      prior.init( t, "Value", &!is_primitive )
endClass

