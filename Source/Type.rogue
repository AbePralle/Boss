module Boss

class Type
  GLOBAL METHODS
    method create( t:Token, name:String )->Type
      local entry = Program.types.find( name )
      if (entry) return entry.value

      local type = Type( t, name, &!is_primitive )
      return type

  PROPERTIES
    t            : Token
    name         : String
    is_primitive : Logical
    stack_type   : StackType

  METHODS
    method init( t, name, is_primitive )
      Program.types[ name ] = this

    method cmd_stack_pop( cmd:Cmd )->Cmd
      which (stack_type)
        case StackType.INT32:  return StackPopInt32(cmd.t,cmd)
        case StackType.STRING: return StackPopString(cmd.t,cmd)
        case StackType.OBJECT: return StackPopObject(cmd.t,cmd)
        others:                return StackPopReal64(cmd.t,cmd)
      endWhich

    method description->String
      return name

    method is_reference->Logical
      return (not is_primitive)
endClass

class TypePrimitive : Type
endClass

class TypeLogical : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Logical", &is_primitive )
      stack_type = StackType.INT32
endClass

class TypeByte : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Byte", &is_primitive )
      stack_type = StackType.INT32
endClass

class TypeCharacter : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Character", &is_primitive )
      stack_type = StackType.INT32
endClass

class TypeInt32 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Int32", &is_primitive )
      stack_type = StackType.INT32
endClass

class TypeReal32 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Real32", &is_primitive )
      stack_type = StackType.REAL64
endClass

class TypeReal64 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Real64", &is_primitive )
      stack_type = StackType.REAL64
endClass

class TypeString : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "String", &is_primitive )
      stack_type = StackType.STRING
endClass

