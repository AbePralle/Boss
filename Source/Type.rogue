module Boss

class Type
  GLOBAL METHODS
    method create( t:Token, name:String )->Type
      local entry = Program.current_module.types.find( name )
      if (entry) return entry.value

      local type = Type( t, name, &!is_primitive )
      return type

  PROPERTIES
    context_module : Module
    t              : Token
    name           : String
    is_primitive   : Logical
    op_type        : OpType

    #global_methods_by_name

  METHODS
    method init( t, name, is_primitive )
      context_module = Program.current_module
      Program.current_module.types[ name ] = this

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToObject( cmd.t, cmd, this )

    method description->String
      return name

    method is_reference->Logical
      return (not is_primitive)
endClass

class TypePrimitive : Type
endClass

class TypeLogical : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Logical", &is_primitive )
      op_type = OpType.LOGICAL

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToInt32(cmd.t,cmd)
endClass

class TypeByte : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Byte", &is_primitive )
      op_type = OpType.INT32

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToInt32(cmd.t,cmd)
endClass

class TypeCharacter : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Character", &is_primitive )
      op_type = OpType.INT32

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToInt32(cmd.t,cmd)
endClass

class TypeInt32 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Int32", &is_primitive )
      op_type = OpType.INT32

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToInt32(cmd.t,cmd)
endClass

class TypeReal32 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Real32", &is_primitive )
      op_type = OpType.REAL64

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToReal64(cmd.t,cmd)
endClass

class TypeReal64 : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "Real64", &is_primitive )
      op_type = OpType.REAL64

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToReal64(cmd.t,cmd)
endClass

class TypeString : TypePrimitive
  METHODS
    method init( t:Token )
      prior.init( t, "String", &is_primitive )
      op_type = OpType.STRING

    method cmd_cast( cmd:Cmd )->Cmd
      return CastToString(cmd.t,cmd)
endClass

