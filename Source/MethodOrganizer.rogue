module Boss

class MethodOrganizer : Visitor
  PROPERTIES
    this_module      : Module
    this_type        : Type
    this_procedure   : Procedure

    current_statements_rewriter : ListRewriter<<Cmd>>

  METHODS
    method init( this_module )

    method visit( this_type )
      visit( this_type, forEach in (forEach in this_type.methods_by_name) )

    method visit( this_type, this_procedure )
      visit( this_procedure )

    #method on_visit( cmd:GlobalMethodDef )

    method on_enter( cmd:Local )
      if (cmd.fp_offset == -1)
        cmd.fp_offset = this_procedure.locals.count
        cmd.is_parameter = cmd.fp_offset < this_procedure.parameters.count
        if (cmd.is_parameter)
          require cmd.type_ref
          cmd.type = cmd.type_ref->Type
        endIf
        this_procedure.locals.add( cmd )
      endIf

    method on( cmd:LocalDeclarations )->Cmd
      if (cmd.type_ref)
        forEach (decl in cmd.declarations)
          block decl = decl->(as Local)
            decl.type_ref = cmd.type_ref
            block decl = visit( decl )
              if (decl) current_statements_rewriter.write( decl )
            endBlock
          endBlock
        endForEach
      else
        forEach (decl in cmd.declarations)
          decl = visit( decl )
          if (decl) current_statements_rewriter.write( decl )
        endForEach
      endIf
      return null

    method on_leave( cmd:Method )
      on_leave( cmd->(as Procedure) )

      local sig = cmd.signature
      if (cmd.type_context.methods_by_signature.contains(sig))
        throw cmd.t.error( "Type $ already defines method $."(cmd.type_context.name,sig) )
      endIf
      cmd.type_context.methods_by_signature[ sig ] = cmd

    method on_enter( cmd:Procedure )
      ensure cmd.parameters( cmd.t )
      if (cmd.type_context_ref) cmd.type_context = cmd.type_context_ref->Type
      if (cmd.return_type_ref)  cmd.return_type  = cmd.return_type_ref->Type

    method on_leave( cmd:Procedure )
      use builder = StringBuilder.pool
        builder.print cmd.name
        builder.print '('
        forEach (param at i in cmd.parameters)
          if (i > 0) builder.print ','
          builder.print param.type.name
        endForEach
        builder.print ')'
        cmd.signature = builder->String
      endUse

    method on_leave( cmd:Routine )
      on_leave( cmd->(as Procedure) )

      local sig = cmd.signature
      if (this_module.routines_by_signature.contains(sig))
        throw cmd.t.error( "Module $ already defines routine $."(this_module.name,sig) )
      endIf
      this_module.routines_by_signature[ sig ] = cmd

    method on_visit( cmd:Statements )
      temporarily current_statements_rewriter = cmd.list.rewriter
        forEach (element in current_statements_rewriter)
          local visited_element = visit( element )
          if (visited_element) current_statements_rewriter.write( visited_element )
        endForEach
      endTemporarily

endClass

