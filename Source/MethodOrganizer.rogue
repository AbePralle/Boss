module Boss

class MethodOrganizer : Visitor
  PROPERTIES
    this_module    : Module
    this_procedure : Procedure

  METHODS
    method init( this_module, this_procedure )

    #method on_visit( cmd:GlobalMethodDef )

    method on_enter( cmd:Local )
      cmd.type = cmd.type_ref->Type

    method on_visit( cmd:Procedure )
      if (cmd.type_context_ref) cmd.type_context = cmd.type_context_ref->Type
      if (cmd.return_type_ref)  cmd.return_type  = cmd.return_type_ref->Type

      if (cmd.parameters)
        visit( cmd.parameters )
        forEach (param in cmd.parameters)
          cmd.locals.add( param->(as Local).[index=cmd.locals.count] )
        endForEach
      endIf

      use builder = StringBuilder.pool
        builder.print cmd.name
        builder.print '('
        if (cmd.parameters)
          forEach (param at i in cmd.parameters)
            if (i > 0) builder.print ','
            builder.print param.type.name
          endForEach
        endIf
        builder.print ')'
        cmd.signature = builder->String
      endUse

    method on_visit( cmd:Routine )
      on_visit( cmd->(as Procedure) )

      local sig = cmd.signature
      if (this_module.routines.by_signature.contains(sig))
        throw cmd.t.error( "Module $ already defines routine $."(this_module.name,sig) )
      endIf
      this_module.routines.by_signature[ sig ] = cmd

      #{
      if (Program.routines_by_signature.contains(cmd.signature))
        throw cmd.t.error( "A definition for routine $ already exists."(cmd.signature) )
      endIf
      Program.routines_by_signature[cmd.signature] = cmd
      }#

    method organize_procedure( cmd:Procedure )
endClass

