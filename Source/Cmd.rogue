# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Boss

class Cmd( t:Token )
  GLOBAL METHODS
    method to_character( st:String )->Character
      if (st is null or st.count == 0) return Character(0)
      return st[0]

  METHODS
    method init( existing:Cmd )
      t = existing.t

    method cloned->ThisType [propagated]
      return ThisType(this)

    method add( cmd:Cmd )
      throw UnsupportedOperationError()

    method clear
      throw UnsupportedOperationError()

    method count->Int32
      return 0

    method description->String
      return "Cmd"

    method dispatch<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.visit( this )

    method dispatch<<$VisitorType,$ReturnType>>( visitor:$VisitorType )->$ReturnType [propagated]
      return visitor.on( this )

    method dispatch_on_enter<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.on_enter( this )

    method dispatch_on_visit<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.on_visit( this )

    method dispatch_on_visit_children<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.on_visit_children( this )

    method dispatch_on_leave<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.on_leave( this )

    method first->Cmd
      throw UnsupportedOperationError()

    method get( index:Int32 )->Cmd
      throw UnsupportedOperationError()

    method get<<$AsType>>( index:Int32 )->$AsType
      return get(index)->(as $AsType)

    method insert( element:Cmd, before_index=0:Int32 )
      throw UnsupportedOperationError()

    method last->Cmd
      throw UnsupportedOperationError()

    method list->Cmd[]
      throw UnsupportedOperationError()

    method remove_first->Cmd
      throw UnsupportedOperationError()

    method remove_last->Cmd
      throw UnsupportedOperationError()

    method set( index:Int32, value:Cmd )
      throw UnsupportedOperationError()

    method to->Character
      return Character(this->Int32)

    method to->Int32
      return 0

    method to->Logical
      return (this->Int32)?

    method to->Real64
      return this->Int32

    method to->String
      return description
endClass

class CmdList : Cmd
  PROPERTIES
    list = Cmd[]

  METHODS
    method init( t )
      noAction

    method init( t, element:Cmd )
      list.add( element )

    method init( t, element1:Cmd, element2:Cmd )
      list.add( element1 )
      list.add( element2 )

    method init( existing:CmdList )
      prior.init( existing )
      list = existing.list.cloned

    method add( cmd:Cmd )
      @list.add( cmd )

    method clear
      @list.clear

    method count->Int32
      return @list.count

    method description->String
      return "CmdList" + list_description

    method first->Cmd
      return @list.first

    method get( index:Int32 )->Cmd
      return @list[index]

    method insert( element:Cmd, before_index=0:Int32 )
      list.insert( element, before_index )

    method last->Cmd
      return @list.last

    method list->Cmd[]
      return @list

    method list_description->String
      use builder = StringBuilder.pool
        builder.print '['
        forEach (element at index in @list)
          if (index > 0) builder.print ','
          builder.print( %element )
        endForEach
        builder.print ']'
        return builder->String
      endUse

    method remove_first->Cmd
      return @list.remove_first

    method remove_last->Cmd
      return @list.remove_last

    method set( index:Int32, value:Cmd )
      @list[index] = value

    method set_count( new_count:Int32 )
      @list.count = new_count
endClass

class Unary( t, operand:Cmd ) : Cmd
  METHODS
    method init( existing:Unary )
      prior.init( existing )
      operand = existing.operand.cloned

    method description->String
      return "Unary($)"(%operand)
endClass

class Binary( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method init( existing:Binary )
      prior.init( existing )
      left = existing.left.cloned
      right = existing.right.cloned

    method description->String
      return "Binary($,$)"(%left,%right)
endClass

class AST : Cmd
  PROPERTIES
    elements : Cmd

  METHODS
    method init( t, elements )

    method init( existing:AST )
      prior.init( existing )
      if (existing.elements) elements = existing.elements.cloned

    method description->String
      return "AST($)" (%elements)

endClass

class Access : Cmd
  PROPERTIES
    name : String
    args : Cmd

  METHODS
    method init( t, name, args )

    method init( existing:Access )
      prior.init( existing )
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Access($,$)" (%name,%args)

endClass

class Add : Binary
  METHODS
    method description->String
      return "Add($,$)" (%left,%right)

endClass

class AddInt32 : Binary
  METHODS
    method description->String
      return "AddInt32($,$)" (%left,%right)

endClass

class AddObject : Binary
  METHODS
    method description->String
      return "AddObject($,$)" (%left,%right)

endClass

class AddReal64 : Binary
  METHODS
    method description->String
      return "AddReal64($,$)" (%left,%right)

endClass

class AddString : Binary
  METHODS
    method description->String
      return "AddString($,$)" (%left,%right)

endClass

class Args : CmdList
  METHODS
    method description->String
      return "Args" + list_description
endClass

class CastInt32ToObject : Unary
  METHODS
    method description->String
      return "CastInt32ToObject($)" (%operand)

endClass

class CastInt32ToReal64 : Unary
  METHODS
    method description->String
      return "CastInt32ToReal64($)" (%operand)

endClass

class CastInt32ToString : Unary
  METHODS
    method description->String
      return "CastInt32ToString($)" (%operand)

endClass

class CastObjectToInt32 : Unary
  METHODS
    method description->String
      return "CastObjectToInt32($)" (%operand)

endClass

class CastObjectToReal64 : Unary
  METHODS
    method description->String
      return "CastObjectToReal64($)" (%operand)

endClass

class CastObjectToString : Unary
  METHODS
    method description->String
      return "CastObjectToString($)" (%operand)

endClass

class CastReal64ToInt32 : Unary
  METHODS
    method description->String
      return "CastReal64ToInt32($)" (%operand)

endClass

class CastReal64ToObject : Unary
  METHODS
    method description->String
      return "CastReal64ToObject($)" (%operand)

endClass

class CastReal64ToString : Unary
  METHODS
    method description->String
      return "CastReal64ToString($)" (%operand)

endClass

class CastStringToInt32 : Unary
  METHODS
    method description->String
      return "CastStringToInt32($)" (%operand)

endClass

class CastStringToObject : Unary
  METHODS
    method description->String
      return "CastStringToObject($)" (%operand)

endClass

class CastStringToReal64 : Unary
  METHODS
    method description->String
      return "CastStringToReal64($)" (%operand)

endClass

class CastToInt32 : Unary
  METHODS
    method description->String
      return "CastToInt32($)" (%operand)

endClass

class CastToObject : Unary
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, operand )

    method init( t, operand, of_type )

    method init( existing:CastToObject )
      prior.init( existing )
      of_type = existing.of_type

    method description->String
      return "CastToObject($)" (%operand)

endClass

class CastToReal64 : Unary
  METHODS
    method description->String
      return "CastToReal64($)" (%operand)

endClass

class CastToString : Unary
  METHODS
    method description->String
      return "CastToString($)" (%operand)

endClass

class Description : Unary
  METHODS
    method description->String
      return "Description($)" (%operand)

endClass

class DescriptionInt32 : Unary
  METHODS
    method description->String
      return "DescriptionInt32($)" (%operand)

endClass

class DescriptionLogical : Unary
  METHODS
    method description->String
      return "DescriptionLogical($)" (%operand)

endClass

class DescriptionObject : Unary
  METHODS
    method description->String
      return "DescriptionObject($)" (%operand)

endClass

class DescriptionReal64 : Unary
  METHODS
    method description->String
      return "DescriptionReal64($)" (%operand)

endClass

class Identifier : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Identifier )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Identifier($)" (%name)

    method to->Character
      if (name is null or name.count == 0) return Character(0)
      return name[0]

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class Literal : Cmd
  METHODS
    method description->String
      return "Literal"
endClass

class LiteralCharacter : Cmd
  PROPERTIES
    value : Character

  METHODS
    method init( t, value )

    method init( existing:LiteralCharacter )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralCharacter($)" (%value)

    method to->Character: return value
    method to->Int32:     return value
    method to->String:    return value

endClass

class LiteralInt32 : Cmd
  PROPERTIES
    value : Int32

  METHODS
    method init( t, value )

    method init( existing:LiteralInt32 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt32($)" (%value)

    method to->Int32:     return value
    method to->String:    return value

endClass

class LiteralLogical : Cmd
  PROPERTIES
    value : Logical

  METHODS
    method init( t, value )

    method init( existing:LiteralLogical )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralLogical($)" (%value)

    method to->Int32:   return which{value:1 || 0}
    method to->Logical: return value
    method to->String:  return which{value:"true" || "false"}

endClass

class LiteralPi : Cmd
  METHODS
    method description->String
      return "LiteralPi"
endClass

class LiteralReal64 : Cmd
  PROPERTIES
    value : Real64

  METHODS
    method init( t, value )

    method init( existing:LiteralReal64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal64($)" (%value)

    method to->Int32:  return value
    method to->Real64: return value
    method to->String: return value

endClass

class LiteralString : Literal
  PROPERTIES
    value : String

  METHODS
    method init( t, value )

    method init( existing:LiteralString )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralString($)" (%value)

    method to->Character
      if (value is null or value.count == 0) return Character(0)
      return value[0]

    method to->Int32:  return value
    method to->Logical: return value?
    method to->String: return value

endClass

class Print : Cmd
  PROPERTIES
    args : Cmd

  METHODS
    method init( t, args )

    method init( existing:Print )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Print($)" (%args)

endClass

class Println : Cmd
  PROPERTIES
    args : Cmd

  METHODS
    method init( t, args )

    method init( existing:Println )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Println($)" (%args)

endClass

class Procedure : Cmd
  PROPERTIES
    type_context     : Type
    type_context_ref : Cmd
    name             : String
    parameters       : Cmd
    return_type_ref  : Cmd
    return_type      : Type
    attributes       : Cmd
    statements       : Cmd

    signature        : String
    is_resolved      = false

    locals           = Local[]

  METHODS
    method init( t, name, parameters, return_type_ref, attributes, statements )

    method init( existing:Procedure )
      prior.init( existing )
      type_context = existing.type_context
      name = existing.name
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      if (existing.statements) statements = existing.statements.cloned
      locals = existing.locals.cloned

    method accepts_arg_count( n:Int32 )->Logical
      local min = which{ parameters:parameters.count || 0 }
      local max = min
      return (n >= min and n <= max)

    method description->String
      if (signature) return signature
      return name

    method context_signature->String
      if (not type_context) return signature
      return "$.$" (type_context,signature)

endClass

class Routine : Procedure
  METHODS
endClass

class Statements : CmdList
  METHODS
    method description->String
      return "Statements" + list_description
endClass

class Subtract : Binary
  METHODS
    method description->String
      return "Subtract($,$)" (%left,%right)

endClass

class SubtractInt32 : Binary
  METHODS
    method description->String
      return "SubtractInt32($,$)" (%left,%right)

endClass

class SubtractObject : Binary
  METHODS
    method description->String
      return "SubtractObject($,$)" (%left,%right)

endClass

class SubtractReal64 : Binary
  METHODS
    method description->String
      return "SubtractReal64($,$)" (%left,%right)

endClass

class SubtractString : Binary
  METHODS
    method description->String
      return "SubtractString($,$)" (%left,%right)

endClass

class DefineModule : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:DefineModule )
      prior.init( existing )
      name = existing.name

    method description->String
      return "DefineModule($)" (%name)

    method to->Character
      if (name is null or name.count == 0) return Character(0)
      return name[0]

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class TypeReference : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:TypeReference )
      prior.init( existing )
      name = existing.name

    method description->String
      return "TypeReference($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name
endClass

class GlobalMethodDef : Procedure
  METHODS
    method init( t, type_context_ref, name, parameter_defs:Cmd, return_type_ref, attributes, statements )

    method init( existing:GlobalMethodDef )
      prior.init( existing )
      if (existing.type_context_ref) type_context_ref = existing.type_context_ref.cloned

    method description->String
      return "GlobalMethodDef($,$,$,$,$,$)" (%type_context_ref,%name,%parameters,%return_type_ref,%attributes,%statements)

endClass

class CallRoutine : CallProcedure
  METHODS
    method init( t, args )

    method init( t, procedure, args )

    method init( existing:CallRoutine )
      prior.init( existing )
      procedure = existing.procedure
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CallRoutine($)" (%args)
endClass


class CastToValue : Unary
  METHODS
    method description->String
      return "CastToValue($)" (%operand)

endClass

class AddValue : Binary
  METHODS
    method description->String
      return "AddValue($,$)" (%left,%right)

endClass

class DescriptionValue : Unary
  METHODS
    method description->String
      return "DescriptionValue($)" (%operand)

endClass

class SubtractValue : Binary
  METHODS
    method description->String
      return "SubtractValue($,$)" (%left,%right)

endClass

class FlagParameter : Parameter
  METHODS
    method description->String
      return "FlagParameter($,$,$)" (%name,%initial_value,%type_ref)

endClass


class Local : Cmd
  PROPERTIES
    name          : String
    initial_value : Cmd
    type_ref      : Cmd
    type          : Type
    index         : Int32

  METHODS
    method init( t, name, initial_value, type_ref )

    method init( existing:Local )
      prior.init( existing )
      name = existing.name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.type_ref) type_ref = existing.type_ref.cloned

    method description->String
      return "Local($,$,$)" (%name,%initial_value,%type_ref)

    method type->Type
      return @type
endClass

class PushNumber : Unary
  METHODS
    method description->String
      return "PushNumber($)" (%operand)

endClass

class PushObject : Unary
  METHODS
    method description->String
      return "PushObject($)" (%operand)

endClass

class PushResult : Unary
  METHODS
    method description->String
      return "PushResult($)" (%operand)

endClass

class CallProcedure : Cmd
  PROPERTIES
    procedure : Procedure
    args      : Cmd

  METHODS
    method init( t, args )

    method init( t, procedure, args )

    method init( existing:CallProcedure )
      prior.init( existing )
      procedure = existing.procedure
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CallProcedure($)" (%args)

endClass

class CastInt32ToValue : Unary
  METHODS
    method description->String
      return "CastInt32ToValue($)" (%operand)

endClass

class GetLocal : Cmd
  PROPERTIES
    info  : Local
    index : Int32

  METHODS
    method init( t )

    method init( t, info )
      index = info.index

    method init( existing:GetLocal )
      t = existing.t
      info = existing.info
      index = existing.index

    method description->String
      return "GetLocal"
endClass

class GetLocalValue : GetLocal
  METHODS
    method description->String
      return "GetLocalValue[$]"(index)
endClass


class Return : Cmd
  PROPERTIES
    result : Cmd

  METHODS
    method init( t, result )

    method init( existing:Return )
      prior.init( existing )
      if (existing.result) result = existing.result.cloned

    method description->String
      return "Return($)" (%result)

endClass

class ReturnResult : Cmd
  PROPERTIES
    result : Cmd

  METHODS
    method init( t, result )

    method init( existing:ReturnResult )
      prior.init( existing )
      if (existing.result) result = existing.result.cloned

    method description->String
      return "ReturnResult($)" (%result)

endClass
